% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggraphics.R, R/handler-methods.R
\name{addHandlerChanged.GGraphics}
\alias{addHandlerChanged.GGraphics}
\alias{addHandlerClicked.default}
\alias{addHandler}
\alias{addHandler.default}
\alias{addHandlerChanged}
\alias{addHandlerChanged.default}
\alias{addHandlerClicked}
\alias{addHandlerDoubleclick}
\alias{addHandlerDoubleclick.default}
\alias{addHandlerRightclick}
\alias{addHandlerRightclick.default}
\alias{addHandlerShiftclick}
\alias{addHandlerShiftclick.default}
\alias{addHandlerControlclick}
\alias{addHandlerControlclick.default}
\alias{addHandlerColumnclicked}
\alias{addHandlerColumnclicked.default}
\alias{addHandlerColumnDoubleclicked}
\alias{addHandlerColumnDoubleclicked.default}
\alias{addHandlerColumnRightclicked}
\alias{addHandlerColumnRightclicked.default}
\alias{addHandlerSelect}
\alias{addHandlerSelect.default}
\alias{addHandlerSelectionChanged}
\alias{addHandlerSelectionChanged.default}
\alias{addHandlerFocus}
\alias{addHandlerFocus.default}
\alias{addHandlerBlur}
\alias{addHandlerBlur.default}
\alias{addHandlerDestroy}
\alias{addHandlerDestroy.default}
\alias{addHandlerUnrealize}
\alias{addHandlerUnrealize.default}
\alias{addHandlerExpose}
\alias{addHandlerExpose.default}
\alias{addHandlerKeystroke}
\alias{addHandlerKeystroke.default}
\alias{addHandlerMouseMotion}
\alias{addHandlerMouseMotion.default}
\alias{addHandlerIdle}
\alias{addPopupMenu}
\alias{addPopupMenu.default}
\alias{addRightclickPopupMenu}
\alias{addRightclickPopupMenu.default}
\alias{add3rdmousePopupMenu}
\alias{add3rdMousePopupMenu}
\alias{addDropSource}
\alias{addDropSource.default}
\alias{addDropTarget}
\alias{addDropTarget.default}
\alias{addDragMotion}
\alias{addDragMotion.default}
\alias{blockHandlers}
\alias{blockHandlers.default}
\alias{blockHandler}
\alias{blockHandler.default}
\alias{unblockHandlers}
\alias{unblockHandlers.default}
\alias{unblockHandler}
\alias{unblockHandler.default}
\alias{removeHandler}
\alias{removeHandler.default}
\title{change handler for ggraphics}
\usage{
\method{addHandlerChanged}{default}(obj, handler, action = NULL, ...)

\method{addHandlerClicked}{default}(obj, handler, action = NULL, ...)

addHandler(obj, signal, handler, action = NULL, ...)

\method{addHandler}{default}(obj, signal, handler, action = NULL, ...)

addHandlerChanged(obj, handler, action = NULL, ...)

\method{addHandlerChanged}{default}(obj, handler, action = NULL, ...)

addHandlerClicked(obj, handler, action = NULL, ...)

\method{addHandlerClicked}{default}(obj, handler, action = NULL, ...)

addHandlerDoubleclick(obj, handler, action = NULL, ...)

\method{addHandlerDoubleclick}{default}(obj, handler, action = NULL, ...)

addHandlerRightclick(obj, handler, action = NULL, ...)

\method{addHandlerRightclick}{default}(obj, handler, action = NULL, ...)

addHandlerShiftclick(obj, handler, action = NULL, ...)

\method{addHandlerShiftclick}{default}(obj, handler, action = NULL, ...)

addHandlerControlclick(obj, handler, action = NULL, ...)

\method{addHandlerControlclick}{default}(obj, handler, action = NULL, ...)

addHandlerColumnclicked(obj, handler, action = NULL, ...)

\method{addHandlerColumnclicked}{default}(obj, handler, action = NULL, ...)

addHandlerColumnDoubleclicked(obj, handler, action = NULL, ...)

\method{addHandlerColumnDoubleclicked}{default}(obj, handler, action = NULL, ...)

addHandlerColumnRightclicked(obj, handler, action = NULL, ...)

\method{addHandlerColumnRightclicked}{default}(obj, handler, action = NULL, ...)

addHandlerSelect(obj, handler, action = NULL, ...)

\method{addHandlerSelect}{default}(obj, handler, action = NULL, ...)

addHandlerSelectionChanged(obj, handler, action = NULL, ...)

\method{addHandlerSelectionChanged}{default}(obj, handler, action = NULL, ...)

addHandlerFocus(obj, handler, action = NULL, ...)

\method{addHandlerFocus}{default}(obj, handler, action = NULL, ...)

addHandlerBlur(obj, handler, action = NULL, ...)

\method{addHandlerBlur}{default}(obj, handler, action = NULL, ...)

addHandlerDestroy(obj, handler, action = NULL, ...)

\method{addHandlerDestroy}{default}(obj, handler, action = NULL, ...)

addHandlerUnrealize(obj, handler, action = NULL, ...)

\method{addHandlerUnrealize}{default}(obj, handler, action = NULL, ...)

addHandlerExpose(obj, handler, action = NULL, ...)

\method{addHandlerExpose}{default}(obj, handler, action = NULL, ...)

addHandlerKeystroke(obj, handler, action = NULL, ...)

\method{addHandlerKeystroke}{default}(obj, handler, action = NULL, ...)

addHandlerMouseMotion(obj, handler, action = NULL, ...)

\method{addHandlerMouseMotion}{default}(obj, handler, action = NULL, ...)

addHandlerIdle(...)

addPopupMenu(obj, menulist, action = NULL, ...)

\method{addPopupMenu}{default}(obj, menulist, action = NULL, ...)

addRightclickPopupMenu(obj, menulist, action = NULL, ...)

\method{addRightclickPopupMenu}{default}(obj, menulist, action = NULL, ...)

\method{addRightclickPopupMenu}{default}(obj, menulist, action = NULL, ...)

\method{addRightclickPopupMenu}{default}(obj, menulist, action = NULL, ...)

addDropSource(
  obj,
  handler,
  action = NULL,
  data.type = c("text", "object"),
  ...
)

\method{addDropSource}{default}(
  obj,
  handler,
  action = NULL,
  data.type = c("text", "object"),
  ...
)

addDropTarget(obj, handler, action = NULL, ...)

\method{addDropTarget}{default}(obj, handler, action = NULL, ...)

addDragMotion(obj, handler, action = NULL, ...)

\method{addDragMotion}{default}(obj, handler, action = NULL, ...)

blockHandlers(obj, ...)

\method{blockHandlers}{default}(obj, ...)

blockHandler(obj, ID, ...)

\method{blockHandler}{default}(obj, ID, ...)

unblockHandlers(obj, ...)

\method{unblockHandlers}{default}(obj, ...)

unblockHandler(obj, ID, ...)

\method{unblockHandler}{default}(obj, ID, ...)

removeHandler(obj, ID, ...)

\method{removeHandler}{default}(obj, ID, ...)
}
\arguments{
\item{obj}{object receiving event and emitting a signal to the handler}

\item{handler}{handler to assign when signal is emitted. A handler
is a function, its first argument should expect a list with
components \code{obj} containing a reference to the object and
\code{action}. Some handlers are passed additional values.}

\item{action}{passed to handler to parameterize call.}

\item{...}{passed along}

\item{signal}{toolkit signal, e.g. "clicked"}

\item{menulist}{a list of \code{gaction} items or a \code{gmenu} instance}

\item{data.type}{Type of data returned. It is either text or an object}

\item{ID}{returned by addHandler. If missing will try to block all handler passed to constructor}
}
\value{
a handler ID which can be used to block/unblock or remove the handler
}
\description{
The change handler for ggraphics is called when a rubber-band selection is completed

The click handler is called on a mouse click. The handler object should pass in value for \code{x}, \code{y}

A GUI is made interactive by assigning handlers to user-generated
events, such as a mouse click, change of widget state, or keyboard
press. In \pkg{gWidgets2} handlers are assigned through various
\code{addHandlerXXX} methods. The handlers are functions whose
first argument should expect a list with components \code{obj} (to
pass in the receiver object) and \code{action} (to pass in any
user-supplied value to the \code{action} argument). Some handlers
add other components, such as mouse position information on a
click, or key information on a keyboard event.

The "changed" event varies wildly amongst the widgets, but is
meant to be the most "obvious" one. Typically this is also similar
to "selected".

This may not be supported by all toolkits.

This may not be supported by all toolkits.

This may not be supported by all toolkits.

For table widgets (\code{gtable}, \code{gdf}) clicking the column
header should trigger this event. The column that is clicked on is
passed back in the component \code{column}.

If defined (\code{gtable}, \code{gdf}) calls event handler for
double click enent. Passes back column information through
\code{column} component.

The select event defaults to the "changed" event.

The "select" event is when a user "selects" an object, the
"selection changed" event is when the selection changes. The
distinction is in table and tree widgets where a user may select
values with a single click yet want to initiate an action with a
double click. The latter is the "addHandlerSelect" event, the
former the "addHandlerSelectionChanged" event.

When a widget has the focus, it will receive the keyboard
input. This handler is called when a widget receives the focus.

A blur or focus out event for a widget triggers this event handler

When a widget is destroyed, a handler can be assigned to perform any clean up tasks that are needed.

For gwindow objects this handler is called before the window is
closed. If this handler returns \code{TRUE} the window will be
closed, if \code{FALSE} the window will not be closed. In
contrast, the "destroy" handler does not allow conditional
destruction.

The "h" argument has components \code{key} for the key and possibly \code{modifier} for the modifier.

deprecated. See \code{\link{gtimer}}.

Defaults to adding a right-click mouse popup menu, better known as a
context menu, though some toolkits have both this and the latter
provided.

These menus are also known as context menus, though there isn't
really a good mechanism within \pkg{gWidgets2} to make the menu
items context sensitive.

Drag and drop requires one to register widgets a sources for
dragging, a widgets as a targets for dropping.

The handler is called on the drop event. The component
\code{dropdata} passes in the value being transferred by dragging.

Block all handlers for an object. Removed via unblockHandlers.

The block is a counter that gets decremented. If more
blockHandlers calls are made than unblockHandlers, the handlers
will still be blocked.
}
\details{
Although the \code{add_handler} method, to which \code{addHandler}
dispatches, is basically the workhorse to add a handler to
response to a signal, it generally isn't called directly, as its
use is not cross toolkit. Rather, if possible, one should use the
\code{addHandlerXXX} methods to add a handler. These dispatch to
this (basically) but do so in a toolkit independent manner.

This call (and the others) returns a handler ID which may be used
for some toolkits later on to remove, block or unblock the
call. All handlers for a widget may be blocked or unblocked via
\code{blockHandlers} and \code{unblockHandlers}.

The "changed" event is also the one that a handler
passed to the constructor is called on.

To specify the values that is transferred in a drag and drop
event, the handler specified here should return the value to pass
via drag and drop. It will appear as the \code{dropdata} component
of the list passed in as the first argument of the drop handler
}
\note{
This method is not toolkit independent, as the signal value depends on the toolkit

For the gWidgets2Qt package one can not block, unblock or
remove a single handler, but rather must do all the objects
handlers at once.
}
\seealso{
\code{\link{blockHandlers}},
\code{\link{unblockHandlers}}, \code{\link{blockHandler}},
\code{\link{unblockHandler}}, and \code{\link{removeHandler}}

\code{\link{addHandlerUnrealize}}.

\code{\link{blockHandlers}} to block all handlers for widget
}
